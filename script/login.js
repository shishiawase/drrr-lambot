const bot = new Telegraf("2064104833:AAFMFd17IPxlIGPxSPLtCDaJO--zdy359nI");
let drrr = {};
let bans = [];
let bansArray = [];
let usersArray = [];
let checkhost = false;
let roomsList = {};
let roomsArray = [];
let roomsText = "";
let whitelist = {
	stat: false, // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—ã–∫–ª—é—á–µ–Ω
	mode: "",
	users: []
};
const chars = {
  "_": "\\_",
  "*": "\\*",
  "[": "\\[",
  "`": "\\`"
};
const reChar = new RegExp("_|\\*|\\[|`", "gi");

let Buttons = {
    Mod: {
        reply_markup: {
            inline_keyboard: [
                [
                    { text: "Kick‚ö†", callback_data: "kick" },
                    { text: "Ban‚õî", callback_data: "ban" },
                    { text: "Reportüö´", callback_data: "report" }
                ],
                [
                    { text: "Unban‚≠ï", callback_data: "unban" },
                    { text: "Whitelistüìú", callback_data: "whitelist" },
                ],
                [
                    { text: "–û—Ç–º–µ–Ω–∞‚ùå", callback_data: "cancel" }
                ]
            ]
        }
    },
    RoomSet: {
        reply_markup: {
            inline_keyboard: [
                [
                    { text: "–ù–∞–∑–≤–∞–Ω–∏–µüîÅ", callback_data: "title" },
                    { text: "–û–ø–∏—Å–∞–Ω–∏–µ", callback_data: "desc" }
                ],
                [
                    { text: "–°–º–µ–Ω–∞ –≤–ª–∞—Å—Ç–∏üëë", callback_data: "chown" },
                    { text: "–ò–Ω—Ñ–∞ –æ –∫–æ–º–Ω–∞—Ç–µ‚Ñπ", callback_data: "roomInfo" }
                ],
                [
                    { text: "–í—ã–π—Ç–∏ –∏–∑ –∫–æ–º–Ω–∞—Ç—ãüö™", callback_data: "leave" }
                ],
                [
                    { text: "–û—Ç–º–µ–Ω–∞‚ùå", callback_data: "cancel" }
                ]
            ]
        }
    },
    Msg: {
        reply_markup: {
            inline_keyboard: [
                [
                    { text: "@", callback_data: "tap" },
                    { text: "–õ–°üì©", callback_data: "dm" }
                ],
                [
                    { text: "–û—Ç–º–µ–Ω–∞‚ùå", callback_data: "cancel" }
                ]
            ]
        }
    },
    Users: {
        reply_markup: {}
    },
    RoomList: {
        reply_markup: {}
    },
    YesNo: {
        reply_markup: {
            inline_keyboard: [
                [
                    { text: "–î–∞‚úÖ", callback_data: "yes" },
                    { text: "–ù–µ—Ç‚ùå", callback_data: "no" }
                ]
            ]
        }
    },
    Whitelist: {
        reply_markup: {
            inline_keyboard: [
                [
                    { text: "–ö–∏–∫‚ö†", callback_data: "kick" },
                    { text: "–ë–∞–Ω‚õî", callback_data: "ban" },
                    { text: "–†–µ–ø–æ—Ä—Çüö´", callback_data: "report" }
                ]
            ]
        }
    },
    Bans: {
        reply_markup: {}
    },
    Device: {
        reply_markup: {
            inline_keyboard: [
                [
                    { text: "üì±", callback_data: "phone" },
                    { text: "üìü", callback_data: "labtop" },
                    { text: "üíª", callback_data: "pc" },
                ],
                [
                    { text: "üì∫", callback_data: "tv" },
                    { text: "ü§ñ", callback_data: "bot" }
                ]
            ]
        }
    }
};

bansCheck = () => {
    users = []; temp = []; num = 0;

    if (bans.length) then {
        bans.forEach((user) => {
            if (num !== 3) then {
                num++;
                temp.push({ text: user, callback_data: user });
            }
            else {
                users.push(temp);
                temp = []; num = 0;
                num++;
                temp.push({ text: user, callback_data: user });
            }
        });
        users.push(temp);
        users.push([{ text: "–ù–∞–∑–∞–¥üîô", callback_data: "back" }]);

        bansArray = users;
    }
}

hostCheck = () => {
    check = false;

    drrr.getLounge(() => {
        room = drrr.rooms.find((room) => {
            room.users.find((user) => {
                user.name === drrr.profile.name
            })
        });

        if (room.host.name === drrr.profile.name) then {
            checkhost = true;
        }
        else {
            checkhost = false;
        }
    })
}

roomUsers = () => {
    users = []; temp = []; num = 0;

    drrr.getLoc(() => {
        drrr.users.forEach((user) => {
            if (user.name !== drrr.profile.name) then {
                // –ú–∞–∫—Å–∏–º—É–º 3 –∫–Ω–æ–ø–∫–∏, –µ—Å–ª–∏ –±–æ–ª—å—à–µ 3, —Ç–æ –≤—ã–≤–æ–¥–∏—Ç –≤ –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
                if (num !== 3) then {
                    num++;
                    temp.push({ text: user.name, callback_data: user.name });
                }
                else {
                    users.push(temp);
                    temp = []; num = 0;
                    num++;
                    temp.push({ text: user.name, callback_data: user.name });
                }
            }
        });
        users.push(temp);
        users.push([{ text: "–ù–∞–∑–∞–¥üîô", callback_data: "back" }]);
        // –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –≤–∏–¥–µ –∫–Ω–æ–ø–æ–∫
        usersArray = users;
    })
}

ruRoom = (type) => {
    rooms = []; temp = []; num = 0;
    // –¢–æ–∂–µ, —á—Ç–æ –∏ —Å–≤–µ—Ä—Ö—É, —Ç–æ–ª—å–∫–æ —Å –∫–æ–º–Ω–∞—Ç–∞–º–∏
    drrr.getLounge(() => {
        if (type === "room") then {
            drrr.rooms.forEach((room) => {
                if (room.language === "ru-RU") then {
                    roomsList[room.name] = {
                        id: room.roomId
                    };

                    if (num !== 3) then {
                        num++;
                        temp.push({ text: room.name, callback_data: room.name });
                    }
                    else {
                        rooms.push(temp);
                        temp = []; num = 0;
                        num++;
                        temp.push({ text: room.name, callback_data: room.name });
                    }
                }
            });

            rooms.push(temp);
            rooms.push([{ text: "–û—Ç–º–µ–Ω–∞‚ùå", callback_data: "cancel" }]);
            roomsArray = rooms;
        }
        else {
            let text = "";
            drrr.rooms.forEach((room) => {
                if (room.language === "ru-RU") then {
                    temp.push(room.host.name.replace(reChar, m => chars[m]) + (if (room.host.tripcode) then "`#" + room.host.tripcode.replace(reChar, m => chars[m]) + "`" else ""));

                    room.users.forEach((user) => {
                        if (user.tripcode) then {
                            rooms.push(user.name.replace(reChar, m => chars[m]) + "`#" + user.tripcode + "`");
                        }
                        else {
                            rooms.push(user.name.replace(reChar, m => chars[m]));
                        }
                    });

                    text = text + "*–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã:*\n‚§∑ " + room.name.replace(reChar, m => chars[m]) + "\n*–•–æ—Å—Ç:*\n‚§∑ " + temp[0] + "\n*–û–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã:*\n‚§∑ " + (if (room.description) then room.description.replace(reChar, m => chars[m]) else "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è") + "\n*–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:*\n‚§∑ " + rooms.join("\n‚§∑ ") + "\n\n";
                    rooms = [];
                    temp = [];
                }
            });
            roomsText = text;
        }
    })
}
const Kick = new Scenes.WizardScene(
    "kick",
    (ctx) => {
        if (checkhost !== true) then {
            ctx.reply("–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –≥–ª–∞–≤–Ω—ã–º –≤ —ç—Ç–æ–π –∫–æ–º–Ω–∞—Ç–µ, –¥–ª—è —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.");
            return ctx.scene.leave();
        }
        else {
            Buttons.Users.reply_markup.inline_keyboard = usersArray;

            ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", Buttons.Users);
            return ctx.wizard.next();
        }
    },
    (ctx) => {
        object = ctx.update.callback_query.data;
        msgId = ctx.update.callback_query.message.message_id;
        ctx.deleteMessage(msgId);

        if (object === "back") then {
            ctx.wizard.back();
        }
        else {
            drrr.kick(object, () => {
                ctx.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å " + object + " –∫–∏–∫–Ω—É—Ç.");
                return ctx.scene.leave();
            })
        }
    }
);
const Ban = new Scenes.WizardScene(
    "ban",
    (ctx) => {
        if (checkhost !== true) then {
            ctx.reply("–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –≥–ª–∞–≤–Ω—ã–º –≤ —ç—Ç–æ–π –∫–æ–º–Ω–∞—Ç–µ, –¥–ª—è —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.");
            return ctx.scene.leave();
        }
        else {
            Buttons.Users.reply_markup.inline_keyboard = usersArray;

            ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", Buttons.Users);
            return ctx.wizard.next();
        }
    },
    (ctx) => {
        object = ctx.update.callback_query.data;
        msgId = ctx.update.callback_query.message.message_id;
        ctx.deleteMessage(msgId);

        if (object === "back") then {
            ctx.wizard.back();
        }
        else {
            drrr.ban(object, () => {
                bans.push(object);

                ctx.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å " + object + " –∑–∞–±–∞–Ω–µ–Ω.");
                return ctx.scene.leave();
            })
        }
    }
);
const Report = new Scenes.WizardScene(
    "report",
    (ctx) => {
        if (checkhost !== true) then {
            ctx.reply("–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –≥–ª–∞–≤–Ω—ã–º –≤ —ç—Ç–æ–π –∫–æ–º–Ω–∞—Ç–µ, –¥–ª—è —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.");
            return ctx.scene.leave();
        }
        else {
            Buttons.Users.reply_markup.inline_keyboard = usersArray;

            ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", Buttons.Users);
            return ctx.wizard.next();
        }
    },
    (ctx) => {
        object = ctx.update.callback_query.data;
        msgId = ctx.update.callback_query.message.message_id;
        ctx.deleteMessage(msgId);

        if (object === "back") then {
            ctx.wizard.back();
        }
        else {
            drrr.report(object, () => {
                bans.push(object);
                ctx.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å " + object + " –∑–∞—Ä–µ–ø–æ—Ä—á–µ–Ω.");
                return ctx.scene.leave();
            })
        }
    }
);
const Unban = new Scenes.WizardScene(
    "unban",
    (ctx) => {
        if (checkhost !== true) then {
            ctx.reply("–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –≥–ª–∞–≤–Ω—ã–º –≤ —ç—Ç–æ–π –∫–æ–º–Ω–∞—Ç–µ, –¥–ª—è —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.");
            return ctx.scene.leave();
        }
        else {
            Buttons.Bans.reply_markup.inline_keyboard = bansArray;

            if (bans.length) then {
                ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", Buttons.Bans);
                return ctx.wizard.next();
            }
            else {
                ctx.reply("–í—ã –Ω–∏–∫–æ–≥–æ –Ω–µ –±–∞–Ω–∏–ª–∏.");
                return ctx.scene.leave();
            }
        }
    },
    (ctx) => {
        object = ctx.update.callback_query.data;
        ctx.deleteMessage(ctx.update.callback_query.message.message_id);

        drrr.unban(object, () => {
            bans.find((user, ind) => {
                if (user === object) then {
                    bans.splice(ind, 1);
                }
            });

            ctx.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å " + ctx.message.text + " —Ä–∞–∑–±–∞–Ω–µ–Ω.");
            return ctx.scene.leave();
        })
    }
);
const Chown = new Scenes.WizardScene(
    "chown",
    (ctx) => {
        if (checkhost !== true) then {
            ctx.reply("–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –≥–ª–∞–≤–Ω—ã–º –≤ —ç—Ç–æ–π –∫–æ–º–Ω–∞—Ç–µ, –¥–ª—è —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.");
            return ctx.scene.leave();
        }
        else {
            Buttons.Users.reply_markup.inline_keyboard = usersArray;

            ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", Buttons.Users);
            return ctx.wizard.next();
        }
    },
    (ctx) => {
        object = ctx.update.callback_query.data;
        msgId = ctx.update.callback_query.message.message_id;
        ctx.deleteMessage(msgId);

        if (object === "back") then {
            ctx.wizard.back();
        }
        else {
            drrr.handOver(object, () => {
                ctx.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å " + object + " —Å—Ç–∞–ª —Ö–æ—Å—Ç–æ–º.");
                return ctx.scene.leave();
            })
        }
    }
);
const Title = new Scenes.WizardScene(
    "title",
    (ctx) => {
        if (checkhost !== true) then {
            ctx.reply("–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –≥–ª–∞–≤–Ω—ã–º –≤ —ç—Ç–æ–π –∫–æ–º–Ω–∞—Ç–µ, –¥–ª—è —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.");
            return ctx.scene.leave();
        }
        else {
            ctx.wizard.state.msg = { id: ctx.update.callback_query.message.message_id + 1 };

            ctx.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã:");
            return ctx.wizard.next();
        }
    },
    (ctx) => {
        ctx.deleteMessage(ctx.wizard.state.msg.id);
        ctx.deleteMessage();

        drrr.title(ctx.message.text, () => {
            ctx.reply("–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞:\n" + ctx.message.text);
            return ctx.scene.leave();
        })
    }
);
const Desc = new Scenes.WizardScene(
    "desc",
    (ctx) => {
        if (checkhost !== true) then {
            ctx.reply("–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –≥–ª–∞–≤–Ω—ã–º –≤ —ç—Ç–æ–π –∫–æ–º–Ω–∞—Ç–µ, –¥–ª—è —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.");
            return ctx.scene.leave();
        }
        else {
            ctx.wizard.state.msg = { id: ctx.update.callback_query.message.message_id + 1 };

            ctx.reply("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã:");
            return ctx.wizard.next();
        }
    },
    (ctx) => {
        ctx.deleteMessage(ctx.wizard.state.msg.id);
        ctx.deleteMessage();

        drrr.descr(ctx.message.text, () => {
            ctx.reply("–û–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞:\n" + ctx.message.text);
            return ctx.scene.leave();
        })
    }
);
const RoomSet = new Scenes.WizardScene(
    "roomset",
    (ctx) => {
        drrr.getLoc(() => {
            if (drrr.room.roomId) then {
                hostCheck();
                roomUsers();
            }
        });

        ctx.wizard.state.msg = { id: ctx.message.message_id + 1 };
        ctx.deleteMessage();

        ctx.reply("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–Ω–∞—Ç—ã:", Buttons.RoomSet);
        return ctx.wizard.next();
    },
    (ctx) => {
        object = ctx.update.callback_query.data;
        ctx.deleteMessage(ctx.wizard.state.msg.id);

        if (object === "cancel") then {
            return ctx.scene.leave();
        }
        else if (object === "title") then {
            return ctx.scene.enter("title");
        }
        else if (object === "desc") then {
            return ctx.scene.enter("desc");
        }
        else if (object === "chown") then {
            return ctx.scene.enter("chown");
        }
        else if (object === "roomInfo") then {
            users = [];
            hostname = "";

            drrr.getLoc(() => {
                drrr.users.forEach((user) => users.push(user.name.replace(reChar, m => chars[m]) + (if (user.tripcode) then "`#" + user.tripcode.replace(reChar, m => chars[m]) + "`" else "")));
            });

            drrr.getLounge(() => {
                drrr.rooms.find((room) => {
                    if (room.name === drrr.room.name) then {
                        hostname = room.host.name.replace(reChar, m => chars[m]) + (if (room.host.tripcode) then "`#" + room.host.tripcode.replace(reChar, m => chars[m]) + "`" else "");
                    }
                })
                ctx.reply("*–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã:* " + drrr.room.name.replace(reChar, m => chars[m]) + "\n*–•–æ—Å—Ç:* " + hostname + "\n*–û–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã:* " + (if (drrr.room.description) then drrr.room.description.replace(reChar, m => chars[m]) else "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è") + "\n*–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:*\n " + users.join("\n "), { parse_mode: "Markdown" });
                return ctx.scene.leave();
            });
        }
        else if (object === "leave") then {
            drrr.leave(() => {
                whitelist.stat = false;
                bans = [];
                ctx.reply("–í—ã –≤—ã—à–ª–∏ –∏–∑ –∫–æ–º–Ω–∞—Ç—ã.");
            });
            return ctx.scene.leave();
        }
    }
);
const Rooms = new Scenes.WizardScene(
    "rooms",
    (ctx) => {
        ctx.deleteMessage();

        ctx.reply(roomsText, { parse_mode: "Markdown" });
        return ctx.scene.leave();
    }
);
const RoomJoin = new Scenes.WizardScene(
    "joinroom",
    (ctx) => {
        ruRoom("room");
        ctx.deleteMessage();

        ctx.reply("–•–æ—Ç–∏—Ç–µ –≤–æ–π—Ç–∏ –ø–æ ID?", Buttons.YesNo);
        return ctx.wizard.next();
    },
    (ctx) => {
        Buttons.RoomList.reply_markup.inline_keyboard = roomsArray;
        object = ctx.update.callback_query.data;
        ctx.deleteMessage();

        if (object === "yes") then {
            ctx.reply("–í–≤–µ–¥–∏—Ç–µ ID –∫–æ–º–Ω–∞—Ç—ã:");
            return ctx.wizard.next();
        }
        else {
            ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω—É—é –∫–æ–º–Ω–∞—Ç—É(–ø–æ–¥—Ä–æ–±–Ω–µ–µ - rooms):", Buttons.RoomList);
            return ctx.wizard.next();
        }
    },
    (ctx) => {
        object = ctx.update.callback_query.data;
        ctx.deleteMessage();

        if (object === "cancel") then {
            return ctx.scene.leave();
        }
        else if (!ctx.message.text) then {
            drrr.join(roomsList[object].id, () => {
                ctx.reply("–í—Ö–æ–¥ –≤ –∫–æ–º–Ω–∞—Ç—É " + object + " - –≤—ã–ø–æ–ª–Ω–µ–Ω.");
                roomsList = {};
                return ctx.scene.leave();
            });
        }
        else {
            ctx.deleteMessage(ctx.message.message_id - 1);

            drrr.join(ctx.message.text, () => {
                ctx.reply("–í—Ö–æ–¥ –≤ –∫–æ–º–Ω–∞—Ç—É c ID " + ctx.message.text + " - –≤—ã–ø–æ–ª–Ω–µ–Ω.");
                roomsList = {};
                return ctx.scene.leave();
            });
        }
    }
);
const Mod = new Scenes.WizardScene(
    "mod",
    (ctx) => {
        drrr.getLoc(() => {
            if (drrr.room.roomId) then {
                bansCheck();
                hostCheck();
                roomUsers();
            }
        });

        ctx.wizard.state.msg = { id: ctx.message.message_id + 1 };
        ctx.deleteMessage();

        ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", Buttons.Mod);
        return ctx.wizard.next();
    },
    (ctx) => {
        object = ctx.update.callback_query.data;
        ctx.deleteMessage(ctx.wizard.state.msg.id);

        if (object === "cancel") then {
            return ctx.scene.leave();
        }
        else if (object === "kick") then {
            return ctx.scene.enter("kick");
        }
        else if (object === "ban") then {
            return ctx.scene.enter("ban");
        }
        else if (object === "report") then {
            return ctx.scene.enter("report");
        }
        else if (object === "unban") then {
            return ctx.scene.enter("unban");
        }
        else if (object === "whitelist") then {

            if (checkhost !== true) then {
                ctx.reply("–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –≥–ª–∞–≤–Ω—ã–º –≤ —ç—Ç–æ–π –∫–æ–º–Ω–∞—Ç–µ, –¥–ª—è —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.");
                return ctx.scene.leave();
            }
            else {

                if (whitelist.stat === false) then {
                    whitelist.stat = true;

                    drrr.getLoc(() => {
                        drrr.room.users.forEach((user) => {
                            if (user.tripcode) then {
                                whitelist.users.push(user.tripcode);
                            }
                            else {
                                whitelist.users.push(user.name);
                            }
                        });
                    })
                    ctx.wizard.state.msg = { id: ctx.update.callback_query.message.message_id + 1 };

                    ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:", Buttons.Whitelist);
                    return ctx.wizard.next();
                }
                else {
                    whitelist.stat = false;
                    whitelist.users = [];

                    ctx.reply("Whitelist –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.");
                    return ctx.scene.leave();
                }
            }
        }
    },
    (ctx) => {
        object = ctx.update.callback_query.data;
        ctx.deleteMessage(ctx.wizard.state.msg.id);

        if (object === "kick") then {
            whitelist.mode = "kick";
        }
        else if (object === "ban") then {
            whitelist.mode = "ban";
        }
        else {
            whitelist.mode = "report";
        }

        ctx.reply("Whitelist –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.");
        return ctx.scene.leave();
    }
);
const BotLogin = new Scenes.WizardScene(
    "login",
	(ctx) => {
        ctx.wizard.state.msg = { id: ctx.message.message_id + 1 };
		ctx.wizard.state.user = {};
        ctx.deleteMessage();

		ctx.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º:");
		return ctx.wizard.next();
	},
	(ctx) => {
		ctx.wizard.state.user.name = ctx.message.text;
        ctx.deleteMessage();
		ctx.deleteMessage(ctx.wizard.state.msg.id);
        ctx.wizard.state.msg.id = ctx.message.message_id + 1;

		ctx.reply("–í–≤–µ–¥–∏—Ç–µ –∏–∫–æ–Ω–∫—É:\nsaki-2x\ngaki-2x\ntanaka-2x\nkuromu-2x\nkakka\njunsui-2x\nzaika\nbakyura-2x\nkanra\ngg\neight\nkanra-2x\nsetton-2x\nzaika-2x\nzawa\nkyo-2x\nsetton\nsharo-2x\nya-2x\ntanaka\nrotchi-2x\nsan-2x\nbakyura");
        return ctx.wizard.next();
	},
	(ctx) => {
		ctx.wizard.state.user.icon = ctx.message.text;
        ctx.deleteMessage();
        ctx.deleteMessage(ctx.wizard.state.msg.id);
        ctx.wizard.state.msg.id = ctx.message.message_id + 1;

		ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ:", Buttons.Device);
		return ctx.wizard.next();
	},
	(ctx) => {
		ctx.wizard.state.user.agent = ctx.update.callback_query.data;
		login = ctx.wizard.state.user;
        ctx.deleteMessage(ctx.wizard.state.msg.id);
        ctx.wizard.state.msg.id = ctx.update.callback_query.message.message_id + 2;

        drrr = new Bot(__this__, login.name, login.icon, "ru-RU", login.agent);
        drrr.login(() => {
            drrr.save();
            ctx.reply("–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã...");
            later 4000 {
                ruRoom("asd");
                ctx.deleteMessage(ctx.update.callback_query.message.message_id + 1);
				ctx.reply("–•–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–Ω–∞—Ç?", Buttons.YesNo);
				return ctx.wizard.next();
			}
		})
	},
	(ctx) => {
        object = ctx.update.callback_query.data;
        ctx.deleteMessage(ctx.wizard.state.msg.id);

		if (object === "yes") then {
            ctx.reply(roomsText, { parse_mode: "Markdown" });
			return ctx.scene.leave();
		}
		else if (object === "no") then {
            return ctx.scene.leave();
		}
	}
);
const CreateRoom = new Scenes.WizardScene(
	"createRoom",
	(ctx) => {
        ctx.deleteMessage();
		ctx.wizard.state.room = {};

        drrr.getLoc(() => {
            if (drrr.room.roomId) then {
                ctx.reply("–°–Ω–∞—á–∞–ª–∞ –≤—ã–π–¥–µ—Ç–µ –∏–∑ –∫–æ–º–Ω–∞—Ç—ã.");
                return ctx.scene.leave();
            }
            else {
                ctx.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã:");
        		return ctx.wizard.next();
            }
        })
	},
	(ctx) => {
		ctx.wizard.state.room.name = ctx.message.text;
		ctx.deleteMessage(ctx.message.message_id - 1);
		ctx.deleteMessage();

		ctx.reply("–û–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã:");
		return ctx.wizard.next();
	},
	(ctx) => {
		ctx.wizard.state.room.desc = ctx.message.text;
		ctx.deleteMessage(ctx.message.message_id - 1);
		ctx.deleteMessage();

		ctx.reply("–ù–∞ —Å–∫–æ–ª—å–∫–æ —á–µ–ª–æ–≤–µ–∫ (–æ—Ç 2 - 20):");
		return ctx.wizard.next();
	},
	(ctx) => {
		ctx.wizard.state.room.limit = ctx.message.text;
		ctx.deleteMessage(ctx.message.message_id - 1);
		ctx.deleteMessage();

		ctx.reply("–í–∫–ª—é—á–∏—Ç—å –º—É–∑—ã–∫—É?", Buttons.YesNo);
		return ctx.wizard.next();
	},
	(ctx) => {
		object = ctx.update.callback_query.data;
		ctx.deleteMessage();

		if (object === "yes") then {
			ctx.wizard.state.room.music = true;

			ctx.reply("18+?", Buttons.YesNo);
			return ctx.wizard.next();
		}
		else {
			ctx.wizard.state.room.music = false;

			ctx.reply("18+?", Buttons.YesNo);
			return ctx.wizard.next();
		}
	},
	(ctx) => {
		object = ctx.update.callback_query.data;
		ctx.deleteMessage();

		if (object === "yes") then {
			ctx.wizard.state.room.age = true;

			ctx.reply("–°–∫—Ä—ã—Ç–∞—è –∫–æ–º–Ω–∞—Ç–∞?", Buttons.YesNo);
			return ctx.wizard.next();
		}
		else {
			ctx.wizard.state.room.age = false;

			ctx.reply("–°–∫—Ä—ã—Ç–∞—è –∫–æ–º–Ω–∞—Ç–∞?", Buttons.YesNo);
			return ctx.wizard.next();
		}
	},
	(ctx) => {
		object = ctx.update.callback_query.data;
		ctx.wizard.state.room.hidden = (if (object === "yes") then true else false);
		room = ctx.wizard.state.room;
		ctx.deleteMessage();

		drrr.create(room.name, room.desc, room.limit, "ru-RU", room.music, room.age, room.hidden, () => {
			drrr.getLoc(() => {
				ctx.reply("–ö–æ–º–Ω–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞: \n\n–ù–∞–∑–≤–∞–Ω–∏–µ: " + room.name + "\n–û–ø–∏—Å–∞–Ω–∏–µ: " + room.desc + "\n–õ–∏–º–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: " + room.limit + "\n–ú—É–∑—ã–∫–∞: " + (if (room.music === true) then "–ï—Å—Ç—å" else "–ù–µ—Ç") + "\n18+: " + (if (room.age === true) then "–ï—Å—Ç—å" else "–ù–µ—Ç") + "\n–í–∏–¥–∏–º–æ—Å—Ç—å: " + (if (room.hidden === true) then "–°–∫—Ä—ã—Ç–∞—è" else "–í–∏–¥–Ω–∞ –≤—Å–µ–º") + "\nID: " + drrr.room.roomId);
				return ctx.scene.leave();
			})
		})
	}
);
const Msg = new Scenes.WizardScene(
    "msg",
    (ctx) => {
        drrr.getLoc(() => {
            if (drrr.room.roomId) then {
                roomUsers();
            }
            else {
                ctx.reply("–î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–¥–æ –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ –∫–æ–º–Ω–∞—Ç–µ.");
                ctx.scene.leave();
            }
        });

        ctx.wizard.state.msg = { id: ctx.message.message_id + 1 };
        ctx.deleteMessage();

        ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", Buttons.Msg);
        return ctx.wizard.next();
    },
    (ctx) => {
        object = ctx.update.callback_query.data;
        ctx.deleteMessage(ctx.wizard.state.msg.id);

        if (object === "cancel") then {
            return ctx.scene.leave();
        }
        else if (object === "tap") then {
            return ctx.scene.enter("tap");
        }
        else if (object === "dm") then {
            return ctx.scene.enter("dm");
        }
    }
);
const Tap = new Scenes.WizardScene(
    "tap",
    (ctx) => {
        ctx.wizard.state.user = {};
        Buttons.Users.reply_markup.inline_keyboard = usersArray;
        ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", Buttons.Users);
        return ctx.wizard.next();
    },
    (ctx) => {
        ctx.wizard.state.user.name = ctx.update.callback_query.data;
        ctx.deleteMessage(ctx.update.callback_query.message.message_id);
        ctx.wizard.state.msg = { id: ctx.update.callback_query.message.message_id + 1};

        ctx.reply("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ(–µ—Å–ª–∏ –µ—Å—Ç—å —Å—Å—ã–ª–∫–∞, —Ç–æ –≤—Å—Ç–∞–≤—å—Ç–µ –≤ –∫–æ–Ω—Ü–µ —Å–æ–æ–±—â–µ–Ω–∏—è):");
        return ctx.wizard.next();
    },
    (ctx) => {
        link = (if (ctx.message.text.match("http|https")) then ctx.message.text.substring(ctx.message.text.search("http|https")) else "");
        name = ctx.wizard.state.user.name;
        ctx.deleteMessage(ctx.wizard.state.msg.id);
        ctx.deleteMessage();

        drrr.print("@" + name + " " + ctx.message.text, (if (link) then link else ""), () => {
            ctx.reply(drrr.profile.name + ": @" + name + " " + ctx.message.text + (if (link) then " [URL](" + link + ")" else ""));
            return ctx.scene.leave();
        })
    }
);
const Dm = new Scenes.WizardScene(
    "dm",
    (ctx) => {
        ctx.wizard.state.user = {};
        Buttons.Users.reply_markup.inline_keyboard = usersArray;

        ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", Buttons.Users);
        return ctx.wizard.next();
    },
    (ctx) => {
        ctx.wizard.state.user.name = ctx.update.callback_query.data;
        ctx.deleteMessage(ctx.update.callback_query.message.message_id);
        ctx.wizard.state.msg = { id: ctx.update.callback_query.message.message_id + 1};

        ctx.reply("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ(–µ—Å–ª–∏ –µ—Å—Ç—å —Å—Å—ã–ª–∫–∞, —Ç–æ –≤—Å—Ç–∞–≤—å—Ç–µ –≤ –∫–æ–Ω—Ü–µ —Å–æ–æ–±—â–µ–Ω–∏—è):");
        return ctx.wizard.next();
    },
    (ctx) => {
        link = (if (ctx.message.text.match("http|https")) then ctx.message.text.substring(ctx.message.text.search("http|https")) else "");
        name = ctx.wizard.state.user.name;
        ctx.deleteMessage(ctx.wizard.state.msg.id);
        ctx.deleteMessage();

        drrr.dm(name, ctx.message.text, (if (link) then link else ""), () => {
            ctx.reply("–ö–æ–º—É: " + name + "\n‚§∑ " + ctx.message.text + (if (link) then " [URL](" + link + ")" else ""));
            return ctx.scene.leave();
        });
    }
);

const stage = new Scenes.Stage([
    BotLogin,
	CreateRoom,
	Kick,
	Ban,
	Report,
	Unban,
	Mod,
	RoomSet,
	RoomJoin,
	Title,
    Msg,
    Tap,
    Dm,
    Rooms,
    Desc,
    Chown
]);

bot.use(session());
bot.use(stage.middleware());
// –°—Ç–∞—Ä—Ç –±–æ—Ç–∞
bot.start((ctx) => {
    ctx.reply("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.");
});
// C–ª—É—à–∞–µ–º
bot.command("login", (ctx) => ctx.scene.enter("login"))
bot.command("create", (ctx) => ctx.scene.enter("createRoom"))
bot.command("mod", (ctx) => ctx.scene.enter("mod"))
bot.command("roomset", (ctx) => ctx.scene.enter("roomset"))
bot.command("joinroom", (ctx) => ctx.scene.enter("joinroom"))
bot.command("msg", (ctx) => ctx.scene.enter("msg"))
bot.command("rooms", (ctx) => {
    ruRoom("inf");
    later 1000 ctx.scene.enter("rooms");
})
bot.command("cancel", (ctx) => {
    ctx.deleteMessage(ctx.message.message_id - 1);
    ctx.deleteMessage();
    return ctx.scene.leave(sceneType);
})
bot.on("text", ctx => {
    link = ctx.message.text.substring(ctx.message.text.search("http|https"));
    msg = ctx.message.text;

    drrr.print((if !msg.replace(link, "") then msg else msg.replace(link, "")), (if link.match("http|https") then link else ""));
})
bot.launch();

log2mkd = (type, e, room) => {

    e.user = e.user.replace(reChar, m => chars[m]);
	e.text = e.text.replace(reChar, m => chars[m]);

    if (type === "msg")
        then "*" + e.user + "*" + (if e.trip then ("`#" + e.trip + "`: ") else ": ") + e.text + (if e.url then " [URL](" + e.url + ")" else "");
    else if (type === "me")
        then "–î–µ–π—Å—Ç–≤–∏–µ | " + "*" + e.user + "*" + (if e.trip then ("`#" + e.trip + "`: _") else ": _") + e.text + "_" + (if e.url then " [URL](" + e.url + ")" else "");
    else if (type === "dm")
        then "–õ–° | " + "*" + e.user + "*" + (if e.trip then ("`#" + e.trip + "`: ") else ": ") + e.text + (if e.url then " [URL](" + e.url + ")" else "");
    else if (type === "join")
        then "*" + e.user + "*" + (if e.trip then ("`#" + e.trip + "` –≤ —á–∞—Ç–µ.") else " –≤ —á–∞—Ç–µ.");
    else if (type === "leave")
        then "*" + e.user + "*" + (if e.trip then ("`#" + e.trip + "` –ø–æ–∫–∏–Ω—É–ª(–∞) —á–∞—Ç.") else " –ø–æ–∫–∏–Ω—É–ª(–∞) —á–∞—Ç.");
    else if (type === "new-host")
        then "*" + e.user + "*" + (if e.trip then ("`#" + e.trip + "` —Å—Ç–∞–ª(a) –Ω–æ–≤—ã–º —Ö–æ—Å—Ç–æ–º.") else " —Å—Ç–∞–ª(a) –Ω–æ–≤—ã–º —Ö–æ—Å—Ç–æ–º.");
    else if (type === "room-profile")
        then "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ *" + room.name + "*.";
    else if (type === "new-description")
        then "–û–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ *" + room.desc + "*.";
    else if (type === "music")
        then ("*" + e.user + "*" + (if e.trip then ("`#" + e.trip + "` –ø–æ–¥–µ–ª–∏–ª—Å—è –º—É–∑—ã–∫–æ–π --- " + room.music.name + " [URL](" + room.music.url + ")") else " –ø–æ–¥–µ–ª–∏–ª—Å—è –º—É–∑—ã–∫–æ–π --- " + room.music.name + " [URL](" + room.music.url + ")."));

}
// –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º
sendTg = (token, chat_id, type, e, roomLog) => {
	axios({
		"method": "POST",
		"url": "https://api.telegram.org/bot" + token + "/sendMessage",
		"headers": {
			"dataType": "json",
		},
		"data": {
			"chat_id": chat_id,
			"text": log2mkd(type, e, roomLog),
			"parse_mode": "Markdown",
			"disable_web_page_preview": false,
		}
	}).catch(err => {
		console.log("failed:", err.response.data);
	})
}
// –≠–≤–µ–Ω—Ç—ã —á–∞—Ç–∞
event [msg, dm, me, join, leave, new-host, room-profile, new-description, music] (u, m, url, trip, eventObject) => {
	if (u !== drrr.profile.name) then {
        drrr.getRoom(() => {
            room = {
                name: drrr.room.name,
                desc: drrr.room.description,
                music: {
                    name: drrr.room.np.name,
                    url: drrr.room.np.url
                }
            };

            sendTg("2064104833:AAFMFd17IPxlIGPxSPLtCDaJO--zdy359nI", "330766323", eventObject.type, eventObject, room);
        })
	}
}

event [join] (u, m, url, trip) => {
    if (whitelist.stat === true) then {
        whitelist.users.find((user) => {
            if (trip) then {
                if (user !== trip) then {
                    drrr["" + whitelist.mode](u);
                }
            }
            else {
                if (user !== u) then {
                    drrr["" + whitelist.mode](u);
                }
            }
        })
    }
}
